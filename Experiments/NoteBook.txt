APRIL 11th 2022

Art.java due Wednesday
Test 4/29 on Recursion

Topic : Dynamic Programming

- Used to avoid excessive recursive calls

//Long inefficient code
public static long fibonacci(int n){
	if (n == 0) return 0;
	if (n == 1) return 1;
	return fibonacci(n - 1) + fibonacci(n - 2);
}

fb(5) -> 

Col 1:
fb(4) + fb(3)

Col 1a: 
fb(3) + fb(2)

col 1aa:
fb(2) + fb(1)

col 1aaa:
fb(1) + fb(0)

resolve 1aa and 1aaa
1 + 0 + 1 = 2

col 1a:
2 + fb(2)

col 2b:
fb(0) fb(1)

resolve col 1a
3

resolve fb(3) -> 2

resolve fb(5)
5


BETTER APPROACH - TOP DOWN PROGRAMMING

private static long[] f = new long(92);

public static long fibonacciTDP(int n){
	if (n == 0) return 0;
	if (n == 1) return 1;

	if (f[n] > 0) return f[n];

	f[n] = fibonacciTDP(n - 1) + fibonacciTDP(n - 2);
	return f[n];
}


ALTERNATIVE APPROACH - BOTTOM UP PROGRAMMING
public static long fibonacciBUDP(int n){
	long[] f = new long[n + 1];
	f[0] = 0;
	f[1] = 1;
	for (int i = 2; i <= n, i++){
		f[i] = f[i - 1] + f[i - 2];
	}
	return f[n];
}


Combin

Recurrence Relation: 
(n, k) = {(n - 1, k - 1) + (n - 1, k)} when 0 < k < n otherwise 1

public static long combin(int n, int k){
	if (k == 0 || k == n) { return 1; }
	if (k <= 0 || k < 0 || k > n) { return 0; }
	long[][] pascal = new long[n + 1][n + 1];		// Creates a square double array that represents the numbers of pascal's triangle
	pascal[0][0] = 1;								// Base Pascal
	for (int i = 1; i <= n; i++){
		for (int j = 0; j <= i; j++){
			if (j == 0 || j == i) { pascal[i][j] = 1; }
			else { pascal[i][j] = pascal[i - 1][j - 1] + pascal[i - 1][j]; } // Recurrence relationship
		}
	}
	return pascal[n][k];
}



Catalan Trace


Catalan(1)

C_0 = 1

C_0 + 1 = C_1

C_1 + 1 = 2 * (2 * 1 + 1) / 1 + 2

2 * (3) / 3 * 1 = 2





